{"version":3,"sources":["constants.tsx","App.tsx","reportWebVitals.ts","VideoJS.tsx","routes/recipe.tsx","index.tsx"],"names":["GET_FLAVOR","gql","App","useQuery","variables","id","loading","error","data","console","log","readData","className","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","VideoJS","props","options","onReady","videoRef","useRef","playerRef","videojs_","videojs","useEffect","current","videoElement","player","apply","dispose","ref","src","kind","srcLang","label","default","Recipe","params","useParams","useSearchParams","recipeId","style","padding","autoplay","controls","responsive","fluid","poster","sources","type","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","path","element","document","getElementById"],"mappings":"oQA8BaA,GA5BUC,YAAH,+RAmBOA,YAAH,qGASEA,YAAH,4G,GAOQA,YAAH,6GASEA,YAAH,mHAQMA,YAAH,kK,OC1BfC,MAvBf,WACE,MAAiCC,YAASH,EAAY,CACpDI,UAAW,CAAEC,GAAI,8BADXC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KAMxB,OAAIF,EAAgB,2CAChBC,EAAc,0CAID,SAACC,GAAcC,QAAQC,IAAI,UAAWF,GAEvDG,CAASH,GAGP,sBAAKI,UAAU,MAAf,UACE,cAAC,IAAD,CAAMC,GAAG,UAAT,yBAAsC,SCT7BC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,2CC0FCQ,G,MA3FQ,SAACC,GACtB,IAAQC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QACXC,EAAWC,iBAAgC,MAC3CC,EAAYD,iBAA6B,MACzCE,EAAgBC,IAwEtB,OAtEAC,qBAAU,WAER,GAAKH,EAAUI,QAsDEJ,EAAUI,YAtDH,CACtB,IAAMC,EAAeP,EAASM,QAC9B,IAAKC,EAAc,OAEnB,IAAMC,EAAUN,EAAUI,QAAUH,EAClCI,EACAT,GACA,WACEC,GAAWA,EAAQU,MAAMD,MAwB7B1B,QAAQC,IAAI,UAAWyB,MAwBxB,CAACV,EAASC,EAASI,IAGtBE,qBAAU,WACR,OAAO,WACDH,EAAUI,UACZJ,EAAUI,QAAQI,UAClBR,EAAUI,QAAU,SAGvB,IAGD,qBAAK,qBAAL,SACE,0BAAUK,IAAKX,EAAUf,UAAU,wBAAnC,SACE,uBACE2B,IAAI,gCACJC,KAAK,WACLC,QAAQ,KACRC,MAAM,UACNC,SAAO,UCtFF,SAASC,IACtB,IAAMC,EAASC,cACf,EAAwCC,cAAxC,mBACMC,GADN,UACiBH,EAAOG,UAwBxB,OACE,uBAAMC,MAAO,CAAEC,QAAS,UAAxB,UACE,qBAAKtC,UAAU,eAAf,SACE,cAAC,EAAD,CAASa,QAzB+B,CAC5C0B,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,OAAO,EACPC,OAAQ,gCACRC,QAAS,CACP,CACEjB,IAAK,8DACLkB,KAAM,eAgB4B/B,QAXd,WACxBK,IAAQrB,IAAI,8BAYV,qBAAKE,UAAU,qBACf,4BAAIoC,OC7BV,IAAMU,EAAS,IAAIC,IAAa,CAC9BC,IAAK,gCACLC,MAAO,IAAIC,MAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOS,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,mBAAmBC,QAAS,cAACxB,EAAD,eAKhDyB,SAASC,eAAe,SAM1BxD,M","file":"static/js/main.aaa5919f.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nexport const GET_ALL = gql`\n  query GetAll {\n    flavors {\n      name\n      updated\n    }\n    flavor(id: \"6172ae137c794081cdc39167\") {\n      name\n    }\n    ingredients {\n      name\n      updated\n    }\n    ingredient(id: \"6172ae137c794081cdc3916c\") {\n      name\n    }\n  }\n`;\n\nexport const GET_FLAVORS = gql`\n  query Flavors {\n    flavors {\n      name\n      updated\n    }\n  }\n`;\n\nexport const GET_FLAVOR = gql`\n  query Flavor($id: String!) {\n    flavor(id: $id) {\n      name\n    }\n  }\n`;\nexport const GET_INGREDIENTS = gql`\n  query Ingredients {\n    ingredients {\n      name\n      updated\n    }\n  }\n`;\n\nexport const GET_INGREDIENT = gql`\n  query Ingredient($id: String!) {\n    ingredient(id: $id) {\n      name\n    }\n  }\n`;\n\nexport const CREATE_INGREDIENT = gql`\n  mutation CreateIngredient($name: String!) {\n    create(name: $name) {\n      name\n      created_at\n      updated_at\n    }\n  }\n`;\n","// import \"./App.scss\";\nimport { Link } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_FLAVOR } from \"./constants\";\n\nfunction App() {\n  const { loading, error, data } = useQuery(GET_FLAVOR, {\n    variables: { id: \"617d5a01f6b667f8d81f6e7c\" },\n  });\n  // const [createIngredient, { loading, error, data }] =\n  //   useMutation(CREATE_INGREDIENT);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  // createIngredient({ variables: { name: \"Cucumber\" } });\n\n  const readData = (data: any) => console.log(\"data:::\", data);\n\n  readData(data);\n\n  return (\n    <div className=\"App\">\n      <Link to=\"/recipe\">Test Recipe</Link>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect, useRef } from \"react\";\nimport videojs, { VideoJsPlayer } from \"video.js\";\nimport \"video.js/dist/video-js.css\";\ninterface VideoJSProps {\n  options: videojs.PlayerOptions;\n  onReady?: videojs.ReadyCallback;\n}\n\nexport const VideoJS = (props: VideoJSProps) => {\n  const { options, onReady } = props;\n  const videoRef = useRef<null | HTMLVideoElement>(null);\n  const playerRef = useRef<null | VideoJsPlayer>(null);\n  const videojs_: any = videojs;\n\n  useEffect(() => {\n    // make sure Video.js player is only initialized once\n    if (!playerRef.current) {\n      const videoElement = videoRef.current;\n      if (!videoElement) return;\n\n      const player = (playerRef.current = videojs_(\n        videoElement,\n        options,\n        () => {\n          onReady && onReady.apply(player);\n        }\n      ));\n\n      // Create a track object.\n      //   const track = new videojs_.VideoTrack({\n      //     id: \"my-alternate-video-track\",\n      //     kind: \"caption\",\n      //     label: \"Director's Commentary\",\n      //     language: \"en\",\n      //     src: \"../video-track.vtt\",\n      //   });\n\n      //   const track2 = new videojs_.VideoTrack({\n      //     id: \"my-alternate-video-track-2\",\n      //     kind: \"caption\",\n      //     label: \"Director's Commentary\",\n      //     language: \"en\",\n      //   });\n\n      //   const track3 = player\n      //     .videoTracks()\n      //     .getTrackById(\"my-alternate-video-track\");\n\n      console.log(\"player:\", player);\n      // Add the track to the player's video track list.\n      //   player.videoTracks().addTrack(track);\n      //   player.videoTracks().addTrack(track2);\n\n      // Get the current player's VideoTrackList object.\n      //   const videoTrackList = player.videoTracks();\n      //   console.log(\"videoTrackList:\", videoTrackList);\n      //   // Listen to the \"change\" event.\n      //   videoTrackList.addEventListener(\"change\", function () {\n      //     // Log the currently enabled VideoTrack label.\n      //     for (let i = 0; i < videoTrackList.length; i++) {\n      //       const track = videoTrackList[i];\n\n      //       if (track.enabled) {\n      //         videojs.log(\"track changed:::\", track.label);\n      //         return;\n      //       }\n      //     }\n      //   });\n    } else {\n      // you can update player here [update player through props]\n      const player = playerRef.current;\n    }\n  }, [options, onReady, videojs_]);\n\n  // Dispose the Video.js player when the functional component unmounts\n  useEffect(() => {\n    return () => {\n      if (playerRef.current) {\n        playerRef.current.dispose();\n        playerRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div data-vjs-player>\n      <video-js ref={videoRef} className=\"vjs-big-play-centered\">\n        <track\n          src=\"//%PUBLIC_URL%/videotrack.vtt\"\n          kind=\"captions\"\n          srcLang=\"en\"\n          label=\"English\"\n          default\n        />\n      </video-js>\n    </div>\n  );\n};\n\nexport default VideoJS;\n","import { useState } from \"react\";\nimport { Outlet, useParams, useSearchParams } from \"react-router-dom\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\nimport VideoJS from \"../VideoJS\";\n\nexport default function Recipe() {\n  const params = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const recipeId = params.recipeId;\n\n  const videoJsOptions: videojs.PlayerOptions = {\n    autoplay: false,\n    controls: true,\n    responsive: true,\n    fluid: true,\n    poster: \"//vjs.zencdn.net/v/oceans.png\",\n    sources: [\n      {\n        src: \"https://content.jwplatform.com/videos/q1fx20VZ-kNspJqnJ.mp4\",\n        type: \"video/mp4\",\n      },\n    ],\n  };\n\n  const handlePlayerReady = () => {\n    videojs.log(\"Your player is ready!\");\n  };\n\n  // console.log(\"QUERY PARAMS::::GETALL\", searchParams.getAll(\"test\"));\n  // console.log(\"QUERY PARAMS::::GET\", searchParams.get(\"test\"));\n  // console.log(\"URL PARAMS::::\", recipeId);\n\n  return (\n    <main style={{ padding: \"1rem 0\" }}>\n      <div className=\"video-header\">\n        <VideoJS options={videoJsOptions} onReady={handlePlayerReady} />\n      </div>\n      <div className=\"recipe-container\"></div>\n      <p>{recipeId}</p>\n    </main>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nimport Recipe from \"./routes/recipe\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:3000/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <ApolloProvider client={client}>\n        <Routes>\n          <Route path=\"/\" element={<App />} />\n          <Route path=\"recipe/:recipeId\" element={<Recipe />} />\n        </Routes>\n      </ApolloProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}